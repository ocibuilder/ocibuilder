/*
Copyright 2019 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OCIBuilderLister helps list OCIBuilders.
type OCIBuilderLister interface {
	// List lists all OCIBuilders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OCIBuilder, err error)
	// OCIBuilders returns an object that can list and get OCIBuilders.
	OCIBuilders(namespace string) OCIBuilderNamespaceLister
	OCIBuilderListerExpansion
}

// oCIBuilderLister implements the OCIBuilderLister interface.
type oCIBuilderLister struct {
	indexer cache.Indexer
}

// NewOCIBuilderLister returns a new OCIBuilderLister.
func NewOCIBuilderLister(indexer cache.Indexer) OCIBuilderLister {
	return &oCIBuilderLister{indexer: indexer}
}

// List lists all OCIBuilders in the indexer.
func (s *oCIBuilderLister) List(selector labels.Selector) (ret []*v1alpha1.OCIBuilder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OCIBuilder))
	})
	return ret, err
}

// OCIBuilders returns an object that can list and get OCIBuilders.
func (s *oCIBuilderLister) OCIBuilders(namespace string) OCIBuilderNamespaceLister {
	return oCIBuilderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OCIBuilderNamespaceLister helps list and get OCIBuilders.
type OCIBuilderNamespaceLister interface {
	// List lists all OCIBuilders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OCIBuilder, err error)
	// Get retrieves the OCIBuilder from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OCIBuilder, error)
	OCIBuilderNamespaceListerExpansion
}

// oCIBuilderNamespaceLister implements the OCIBuilderNamespaceLister
// interface.
type oCIBuilderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OCIBuilders in the indexer for a given namespace.
func (s oCIBuilderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OCIBuilder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OCIBuilder))
	})
	return ret, err
}

// Get retrieves the OCIBuilder from the indexer for a given namespace and name.
func (s oCIBuilderNamespaceLister) Get(name string) (*v1alpha1.OCIBuilder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ocibuilder"), name)
	}
	return obj.(*v1alpha1.OCIBuilder), nil
}
