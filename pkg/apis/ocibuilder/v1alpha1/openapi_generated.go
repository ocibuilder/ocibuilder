// +build !ignore_autogenerated

/*
Copyright 2019 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	"github.com/go-openapi/spec"
	"k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AliyunOSSContext":      schema_pkg_apis_ocibuilder_v1alpha1_AliyunOSSContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleGalaxy":         schema_pkg_apis_ocibuilder_v1alpha1_AnsibleGalaxy(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleLocal":          schema_pkg_apis_ocibuilder_v1alpha1_AnsibleLocal(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleStep":           schema_pkg_apis_ocibuilder_v1alpha1_AnsibleStep(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AzureBlobContext":      schema_pkg_apis_ocibuilder_v1alpha1_AzureBlobContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Base":                  schema_pkg_apis_ocibuilder_v1alpha1_Base(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildContext":          schema_pkg_apis_ocibuilder_v1alpha1_BuildContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildSpec":             schema_pkg_apis_ocibuilder_v1alpha1_BuildSpec(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildStep":             schema_pkg_apis_ocibuilder_v1alpha1_BuildStep(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplate":         schema_pkg_apis_ocibuilder_v1alpha1_BuildTemplate(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplateStep":     schema_pkg_apis_ocibuilder_v1alpha1_BuildTemplateStep(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Command":               schema_pkg_apis_ocibuilder_v1alpha1_Command(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials":           schema_pkg_apis_ocibuilder_v1alpha1_Credentials(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.DockerStep":            schema_pkg_apis_ocibuilder_v1alpha1_DockerStep(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.EnvCreds":              schema_pkg_apis_ocibuilder_v1alpha1_EnvCreds(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GCSContext":            schema_pkg_apis_ocibuilder_v1alpha1_GCSContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitContext":            schema_pkg_apis_ocibuilder_v1alpha1_GitContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitRemoteConfig":       schema_pkg_apis_ocibuilder_v1alpha1_GitRemoteConfig(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.ImageBuildArgs":        schema_pkg_apis_ocibuilder_v1alpha1_ImageBuildArgs(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.K8sCreds":              schema_pkg_apis_ocibuilder_v1alpha1_K8sCreds(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.KubeSecretCredentials": schema_pkg_apis_ocibuilder_v1alpha1_KubeSecretCredentials(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LocalContext":          schema_pkg_apis_ocibuilder_v1alpha1_LocalContext(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LoginSpec":             schema_pkg_apis_ocibuilder_v1alpha1_LoginSpec(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Metadata":              schema_pkg_apis_ocibuilder_v1alpha1_Metadata(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.NodeStatus":            schema_pkg_apis_ocibuilder_v1alpha1_NodeStatus(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilder":            schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilder(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderList":        schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderList(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderSpec":        schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderSpec(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderStatus":      schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderStatus(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Param":                 schema_pkg_apis_ocibuilder_v1alpha1_Param(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PlainCreds":            schema_pkg_apis_ocibuilder_v1alpha1_PlainCreds(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PushSpec":              schema_pkg_apis_ocibuilder_v1alpha1_PushSpec(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.RegistryCreds":         schema_pkg_apis_ocibuilder_v1alpha1_RegistryCreds(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket":              schema_pkg_apis_ocibuilder_v1alpha1_S3Bucket(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Context":             schema_pkg_apis_ocibuilder_v1alpha1_S3Context(ref),
		"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Stage":                 schema_pkg_apis_ocibuilder_v1alpha1_Stage(ref),
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_AliyunOSSContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AliyunOSSContext refers to configuration required to fetch context from Aliyun OSS",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accessId": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessId refers to access id",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"accessSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessSecret refers to access secret",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint is the storage to connect to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Description: "Bucket refers to the bucket name on gcs",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"),
						},
					},
				},
				Required: []string{"accessId", "accessSecret", "endpoint", "bucket"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_AnsibleGalaxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AnsibleGalaxy contains the information about the role to install through galaxy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"requirements": {
						SchemaProps: spec.SchemaProps{
							Description: "Requirements refer to the requirements.yaml file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the galaxy role",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_AnsibleLocal(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AnsibleLocal contains information to install a ansible role through local playbook",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"playbook": {
						SchemaProps: spec.SchemaProps{
							Description: "Playbook refers to playbook.yaml file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"playbook"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_AnsibleStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AnsibleStep represents an ansible install  within a build",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"local": {
						SchemaProps: spec.SchemaProps{
							Description: "Local contains information to install a ansible role through local playbook",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleLocal"),
						},
					},
					"galaxy": {
						SchemaProps: spec.SchemaProps{
							Description: "Galaxy contains information to install a ansible role through ansible-galaxy",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleGalaxy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleGalaxy", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleLocal"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_AzureBlobContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureBlobContext refers to configuration required to fetch context from Azure Storage Blob",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"account": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureStorageAccount refers to the account name",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessKey refers to the access key",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL refers to blob's URL",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
				},
				Required: []string{"account", "accessKey", "url"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Base(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Base represents base image details",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag is the tag for the image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"platform": {
						SchemaProps: spec.SchemaProps{
							Description: "Platform is the specified platform of the image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"image"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_BuildContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildContext stores the chosen build context for your build, this can be Local, S3 or Git",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"localContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Local context contains local context information for a build",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LocalContext"),
						},
					},
					"s3Context": {
						SchemaProps: spec.SchemaProps{
							Description: "S3Context refers to the context stored on S3 bucket for a build",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Context"),
						},
					},
					"gitContext": {
						SchemaProps: spec.SchemaProps{
							Description: "GitContext refers to the context stored on Git repository",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitContext"),
						},
					},
					"gcsContext": {
						SchemaProps: spec.SchemaProps{
							Description: "GCSContext refers to the context stored on the GCS",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GCSContext"),
						},
					},
					"azureBlobContext": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureBlobContext refers to the context stored on the Azure Storage Blob",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AzureBlobContext"),
						},
					},
					"aliyunOSSContext": {
						SchemaProps: spec.SchemaProps{
							Description: "AliyunOSSContext refers to the context stored on the Aliyun OSS",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AliyunOSSContext"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AliyunOSSContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AzureBlobContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GCSContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LocalContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Context"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_BuildSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildSpec represents the build specifications for images",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"templates": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Templates are set of build templates that describe steps needed to build a Dockerfile",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplate"),
									},
								},
							},
						},
					},
					"steps": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Steps within a build",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildStep"),
									},
								},
							},
						},
					},
				},
				Required: []string{"templates", "steps"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildStep", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplate"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_BuildStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildStep represents a step within the build",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"daemon": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the build framework. Defaults to docker",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Stages of the build",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Stage"),
									},
								},
							},
						},
					},
					"git": {
						SchemaProps: spec.SchemaProps{
							Description: "Git url to fetch the project from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag the tag of the build",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"distroless": {
						SchemaProps: spec.SchemaProps{
							Description: "Distroless if set to true generates a distroless image",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cache": {
						SchemaProps: spec.SchemaProps{
							Description: "Cache for build Set to false by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"purge": {
						SchemaProps: spec.SchemaProps{
							Description: "Purge the build defaults to false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildContext used for image build default looks at the current working directory",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildContext"),
						},
					},
				},
				Required: []string{"stages"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildContext", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Stage"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_BuildTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildTemplate represents the build template that can shared across different builds",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the template",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cmd": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of cmds in a Dockerfile",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplateStep"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "cmd"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplateStep"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_BuildTemplateStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildTemplateStep represents a step within build template",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"docker": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker represents a docker step within build template steps",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.DockerStep"),
						},
					},
					"ansible": {
						SchemaProps: spec.SchemaProps{
							Description: "Ansible represents a ansible step within build template steps",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleStep"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleStep", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.DockerStep"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Command(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Command Represents a single line in a Dockerfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cmd": {
						SchemaProps: spec.SchemaProps{
							Description: "Cmd lowercased command name (e.g `from`)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subCmd": {
						SchemaProps: spec.SchemaProps{
							Description: "SubCmd for ONBUILD only this holds the sub-command",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"isJSON": {
						SchemaProps: spec.SchemaProps{
							Description: "Json bool for whether the value is written in json",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"original": {
						SchemaProps: spec.SchemaProps{
							Description: "Original is the original source line",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startLine": {
						SchemaProps: spec.SchemaProps{
							Description: "StartLine is the original source line number",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"flags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Flags such as `--from=...` for `COPY`.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"value": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Value is the contents of the command (e.g `ubuntu:xenial`)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"cmd", "subCmd", "isJSON", "original", "startLine", "flags", "value"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Credentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Credentials encapsulates different ways of storing the credentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"plain": {
						SchemaProps: spec.SchemaProps{
							Description: "Plain text credentials",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env refers to credentials stored in environment variable",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeSecret refers to K8s secret that holds the credentials",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.KubeSecretCredentials"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.KubeSecretCredentials"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_DockerStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DockerStep represents a step within a build that contains docker commands",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"inline": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Inline Dockerfile commands",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to a file that contains Dockerfile commands",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_EnvCreds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvCreds refers to credentials stored in env vars.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username refers to an env var that holds the username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password refers to an en var that holds the password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"username", "password"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_GCSContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCSContext refers to the context stored on GCP Storage",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialsFilePath": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsFilePath refers to the credentials file path",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiKey": {
						SchemaProps: spec.SchemaProps{
							Description: "APIKey for authentication",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"authRequired": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthRequired checks if authentication is required to connect to GCS",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint is the storage to connect to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Description: "Bucket refers to the bucket name on gcs",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"),
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region refers to GCS region",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"authRequired", "endpoint", "bucket"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_GitContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitContext contains information about an artifact stored in git",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "Git URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username for authentication",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password for authentication",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"sshKeyPath": {
						SchemaProps: spec.SchemaProps{
							Description: "SSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password. ssh key path must be mounted in sensor pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"branch": {
						SchemaProps: spec.SchemaProps{
							Description: "Branch to use to pull trigger resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag to use to pull trigger resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remote": {
						SchemaProps: spec.SchemaProps{
							Description: "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitRemoteConfig"),
						},
					},
				},
				Required: []string{"url"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.GitRemoteConfig"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_GitRemoteConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitRemoteConfig contains the configuration of a Git remote",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the remote to fetch from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urls": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "urls",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "urls"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_ImageBuildArgs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageBuildArgs describes the arguments for running a build command",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the build",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag is the tag of the build",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dockerfile": {
						SchemaProps: spec.SchemaProps{
							Description: "Dockerfile is the path to the generated Dockerfile",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ansible": {
						SchemaProps: spec.SchemaProps{
							Description: "Ansible step outlines the ansible steps in the build *optional",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleStep"),
						},
					},
					"purge": {
						SchemaProps: spec.SchemaProps{
							Description: "Purge the image after it has been pushed defaults to false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildContext is the context for Docker and Buildah defaults to LocalContext in current working directory",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildContext"),
						},
					},
				},
				Required: []string{"name", "tag"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.AnsibleStep", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildContext"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_K8sCreds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "K8sCreds refers to the K8s secret that holds the registry creds.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username refers to the K8s secret that holds username",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password refers to the K8s secret that holds password",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
				Required: []string{"username", "password"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_KubeSecretCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeSecretCredentials refers to K8s secret that holds the credentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret is the K8s secret key selector",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace where the secret is stored",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"secret", "namespace"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_LocalContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LocalContext stores the path for your local build context, implements the ContextReader interface",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"contextPath": {
						SchemaProps: spec.SchemaProps{
							Description: "ContextPath is the path to your build context",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"contextPath"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_LoginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LoginSpec holds the information to log into a registry.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry refers to a OCI image registry",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creds": {
						SchemaProps: spec.SchemaProps{
							Description: "Creds refer to credentials required to log into the registry",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.RegistryCreds"),
						},
					},
				},
				Required: []string{"registry", "token", "creds"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.RegistryCreds"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Metadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Metadata represents data about a build step",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the build step",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels for the step",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations for the step",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeStatus describes the status for an individual node in the ocibuilder configurations. A single node can represent one configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is a unique identifier of a node within build steps It is a hash of the node name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is a unique name in the node tree used to generate the node ID",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"displayName": {
						SchemaProps: spec.SchemaProps{
							Description: "DisplayName is the human readable representation of the node",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase of the node",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "StartedAt is the time at which this node started",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message store data or something to save for configuration",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "UpdateTime is the time when node(OCIBuilder configuration) was updated",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
						},
					},
				},
				Required: []string{"id", "name", "displayName", "phase"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilder(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIBuilder is the definition of a ocibuilder resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generateName": {
						SchemaProps: spec.SchemaProps{
							Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ownerReferences": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "uid",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
									},
								},
							},
						},
					},
					"initializers": {
						SchemaProps: spec.SchemaProps{
							Description: "An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n\nDEPRECATED - initializers are an alpha field and will be removed in v1.15.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Initializers"),
						},
					},
					"finalizers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-strategy": "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managedFields": {
						SchemaProps: spec.SchemaProps{
							Description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.\n\nThis field is alpha and can be changed or removed without notice.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry"),
									},
								},
							},
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderSpec", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilderStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Initializers", "k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry", "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIBuilderList is the list of OCIBuilder resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilder"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.OCIBuilder", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIBuilderSpec represents OCIBuilder specifications.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"params": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Envs are the list of environment variables available to components.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Param"),
									},
								},
							},
						},
					},
					"login": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Logins holds information to log into one or more registries",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LoginSpec"),
									},
								},
							},
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Description: "Build represents the build specifications for images",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildSpec"),
						},
					},
					"push": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Push contains specification to push images to registries",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PushSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildSpec", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.LoginSpec", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Param", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PushSpec"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_OCIBuilderStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIBuilderStatus holds the status of a OCIBuilder resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the high-level summary of the OCIBuilder",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "StartedAt is the time at which this OCIBuilder was initiated",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message is a human readable string indicating details about a OCIBuilder in its phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is a mapping between a node ID and the node's status it records the states for the configurations of OCIBuilder.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.NodeStatus"),
									},
								},
							},
						},
					},
				},
				Required: []string{"phase", "nodes"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Param(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Param represents parameters",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value of the environment variable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dest": {
						SchemaProps: spec.SchemaProps{
							Description: "Dest is the destination of the field to replace with the parameter",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"valueFromEnvVariable": {
						SchemaProps: spec.SchemaProps{
							Description: "ValueFromEnvVar is a variable which is to be replaced by an env var",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"dest"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_PlainCreds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PlainCreds refers to the credentials set inline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"username", "password"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_PushSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PushSpec contains the specification to push images to registries",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry is the name of the registry",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image to push",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "User is the name of kubernetes namespace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Description: "Token required for the OCI complaint registry authentication",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag version of the image (e.g: v0.1.1)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"purge": {
						SchemaProps: spec.SchemaProps{
							Description: "Purge the image after it has been pushed defaults to false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"registry", "image", "user", "token", "tag"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_RegistryCreds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistryCreds holds the credentials to login into a registry",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"k8s": {
						SchemaProps: spec.SchemaProps{
							Description: "K8s refer to the credentials stored in K8s secrets",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.K8sCreds"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env refers to the credentials stored in environment variables",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.EnvCreds"),
						},
					},
					"plain": {
						SchemaProps: spec.SchemaProps{
							Description: "Plain refers to the credentials set inline",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PlainCreds"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.EnvCreds", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.K8sCreds", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.PlainCreds"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_S3Bucket(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Bucket contains information to describe an S3 Bucket",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_S3Context(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Context refers to context stored on S3 bucket to build an image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"),
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials"),
						},
					},
				},
				Required: []string{"endpoint", "bucket", "accessKey", "secretKey"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Credentials", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.S3Bucket"},
	}
}

func schema_pkg_apis_ocibuilder_v1alpha1_Stage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Stage represents a stage within the build",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"base": {
						SchemaProps: spec.SchemaProps{
							Description: "BaseImage refers to parent image for given build stage.",
							Ref:         ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Base"),
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template refers to one of the build templates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cmd": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Cmd refers to a template defined in a stage without a template.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplateStep"),
									},
								},
							},
						},
					},
				},
				Required: []string{"base", "template", "cmd"},
			},
		},
		Dependencies: []string{
			"github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.Base", "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1.BuildTemplateStep"},
	}
}
